/// Toggle strict mode, in which script will throw when not able to cast a value
/// into a certain type (mostly color and number). In non-strict mode, it will
/// return the default value from the given type.
/// @access public
/// @type Bool
$sc-strict-mode: false !default;

/// Default return value for the `to-number(..)` function when running in
/// non-strict mode.
/// @access public
/// @type Number
$sc-non-strict-default-number: 0 !default;

/// Default return value for the `to-color(..)` function when running in
/// non-strict mode.
/// @access public
/// @type Number
$sc-non-strict-default-color: transparent !default;

/// Internal map for dynamically accessing default values for non-strict mode.
/// @access private
/// @type Map
$sc-non-strict-defaults: (
  'number': $sc-non-strict-default-number,
  'color': $sc-non-strict-default-color,
);

/// Internal constants map.
/// @access private
/// @type Map
$sc-constants: (
  'DECIMAL_SPACE': ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'),
  'HEXADECIMAL_SPACE': ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'),
  'COLOR_KEYWORDS': (transparent, aliceblue, antiquewhite, aqua, aquamarine, azure, beige, bisque, black, blanchedalmond, blue, blueviolet, brown, burlywood, cadetblue, chartreuse, chocolate, coral, cornflowerblue, cornsilk, crimson, cyan, darkblue, darkcyan, darkgoldenrod, darkgray, darkgreen, darkgrey, darkkhaki, darkmagenta, darkolivegreen, darkorange, darkorchid, darkred, darksalmon, darkseagreen, darkslateblue, darkslategray, darkslategrey, darkturquoise, darkviolet, deeppink, deepskyblue, dimgray, dimgrey, dodgerblue, firebrick, floralwhite, forestgreen, fuchsia, gainsboro, ghostwhite, gold, goldenrod, gray, green, greenyellow, grey, honeydew, hotpink, indianred, indigo, ivory, khaki, lavender, lavenderblush, lawngreen, lemonchiffon, lightblue, lightcoral, lightcyan, lightgoldenrodyellow, lightgray, lightgreen, lightgrey, lightpink, lightsalmon, lightseagreen, lightskyblue, lightslategray, lightslategrey, lightsteelblue, lightyellow, lime, limegreen, linen, magenta, maroon, mediumaquamarine, mediumblue, mediumorchid, mediumpurple, mediumseagreen, mediumslateblue, mediumspringgreen, mediumturquoise, mediumvioletred, midnightblue, mintcream, mistyrose, moccasin, navajowhite, navy, oldlace, olive, olivedrab, orange, orangered, orchid, palegoldenrod, palegreen, paleturquoise, palevioletred, papayawhip, peachpuff, peru, pink, plum, powderblue, purple, rebeccapurple, red, rosybrown, royalblue, saddlebrown, salmon, sandybrown, seagreen, seashell, sienna, silver, skyblue, slateblue, slategray, slategrey, snow, springgreen, steelblue, tan, teal, thistle, tomato, turquoise, violet, wheat, white, whitesmoke, yellow, yellowgreen),
  'STRINGIFIED_COLOR_KEYWORDS': ('transparent', 'aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure', 'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown', 'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'fuchsia', 'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green', 'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'lime', 'limegreen', 'linen', 'magenta', 'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin', 'navajowhite', 'navy', 'oldlace', 'olive', 'olivedrab', 'orange', 'orangered', 'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'purple', 'rebeccapurple', 'red', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue', 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'teal', 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'white', 'whitesmoke', 'yellow', 'yellowgreen'),
  'UNITS': ('px', 'cm', 'mm', '%', 'ch', 'pc', 'in', 'em', 'rem', 'pt', 'ex', 'vw', 'vh', 'vmin', 'vmax', 'ms', 's', 'deg', 'rad', 'grad', 'turn', 'Hz', 'kHz', 'dpi', 'dpcm', 'dppx'),
  'UNIT_VALUES': (1px, 1cm, 1mm, 1%, 1ch, 1pc, 1in, 1em, 1rem, 1pt, 1ex, 1vw, 1vh, 1vmin, 1vmax, 1ms, 1s, 1deg, 1rad, 1grad, 1turn, 1Hz, 1kHz, 1dpi, 1dpcm, 1dppx),
  'FALSEY_VALUES': (false, null, '', 0),
);

/// Convert to color
/// @param {*} $value - value to cast
/// @return {color | null}
@function to-color($value) {
  $type: type-of($value);

  // If the value is already a color, we can safely return it.
  @if ($type == 'color') {
    @return $value;
  }

  // If the type is not a string, there is no way we can convert it to a color,
  // so we warn and return the default color value (or throw in strict mode).
  @if ($type != 'string') {
    @return _sc-throw($value, 'color');
  }

  $value-lower: to-lower-case($value);

  // If the given value is a stringified color keyword, return the accurate
  // color keyword.
  $color-keyword-index: index(
    map-get($sc-constants, 'STRINGIFIED_COLOR_KEYWORDS'),
    $value-lower
  );

  @if $color-keyword-index {
    @return nth(map-get($sc-constants, 'COLOR_KEYWORDS'), $color-keyword-index);
  }

  // If the color starts with a hash, assume it’s a hexadecimal color triplet
  // and try to convert it to an actual color.
  @else if (str-slice($value-lower, 1, 1) == '#') {
    @return _sc-from-hex($value);
  }

  // If the color starts with `rgb`, assume it’s a rgb(..) function call and try
  // to convert it to an actual color.
  @else if (str-slice($value-lower, 1, 3) == 'rgb') {
    @return _sc-from-rgb($value);
  }

  // If the color starts with `hsl`, assume it’s a hsl(..) function call and try
  // to convert it to an actual color.
  @else if (str-slice($value-lower, 1, 3) == 'hsl') {
    @return _sc-from-hsl($value);
  }

  // If everything has failed, arn and return the default color value (or throw
  // in strict mode).
  @return _sc-throw($value, 'color');
}

/// Convert to bool
/// @param {*} $value - value to cast
/// @return {Bool}
@function to-bool($value) {
  @if index(map-get($sc-constants, 'FALSEY_VALUES'), $value) {
    @return false;
  }

  @return true;
}

/// Convert to list
/// @param {*} $value - value to cast
/// @return {List}
@function to-list($value) {
  $type: type-of($value);
  
  // If the value is already a list, we can safely return it.
  @if ($type == 'list') {
    @return $value;
  }

  // If the value is a map, we return a zip of keys and values (aka a list-map).
  @if ($type == 'map') {
    @return zip(map-keys($value), map-values($value));
  }

  // Else we wrap the item in a single-item list.
  @return ($value,);
}

/// Helper function to throw when running in strict mode, or warn and return
/// default value for expected type when running in non-strict mode.
/// @param {*} $value
/// @param {String} $expected-type
@function _sc-throw($value, $expected-type) {
  $return-value: map-get($sc-non-strict-defaults, $expected-type);

  @if $sc-strict-mode {
    @error 'Could not cast `#{inspect($value)}` to #{$expected-type}.';
  } @else {
    @warn 'Could not cast `#{inspect($value)}` to #{$expected-type}; returning `#{$return-value}`.';
  }

  @return $return-value;
}

/// Convert to map
/// @param {*} $value - value to cast
/// @return {Map}
@function to-map($value) {
  $type: type-of($value);

  // If the value is already a map, we can safely return it.
  @if ($type == 'map') {
    @return $value;
  }

  // If the type is a list, we return an empty list if it has a no item or we
  // map each item to its index in the list.
  @if ($type == 'list') {
    $length: length($value);

    @if ($length == 0) {
      @return ();
    }

    $map: ();

    @for $i from 1 through $length {
      $map: map-merge($map, ($i: nth($value, $i)));
    }

    @return $map;
  }

  @return (1: $value);
}

/// Convert to null
/// @param {*} $value - value to cast
/// @return {Null}
@function to-null($value) {
  @return null;
}

/// Cast a value to a number if possible or return 0
/// @param {String} $value - complete source
/// @return {Number}
@function to-number($value) {
  $type: type-of($value);

  // If the value is already a number, we can safely return it.
  @if ($type == 'number') {
    @return $value;
  }

  // If the value is the `true` boolean, we return 1.
  @if ($value == true)  {
    @return 1;
  }

  // If the value is the `false` boolean, we return 0.
  @if ($value == false) {
    @return 0;
  }

  // If the type is not a string, there is no way we can convert it to a number,
  // so we warn and return the default number value (or throw in strict mode).
  @if ($type != 'string') {
    @return _sc-throw($value, 'number');
  }

  // At this point we have discarded all the edge cases so we can start trying
  // to cast the value into a number.
  $pointer: 1;
  $result: 0;
  $first-character: str-slice($value, $pointer, $pointer);
  $allowed-first-character: join(('-', '.'), map-get($sc-constants, 'DECIMAL_SPACE'));

  // We perform an early check for errors. If value starts with neither a number
  // nor a minus sign, it cannot be casted to a number. Therefore we warn and
  // return the default number value (or throw in strict mode).
  @if not index($allowed-first-character, $first-character) {
    @return _sc-throw($value, 'number');
  }

  // In case the value starts with a dot, we assume it is a float and pad it
  // with a zero.
  @if ($first-character == '.') {
    $value: '0' + $value;
  }

  // We find the integer part of the value.
  $find-integer: _sc-find-integer($value, $pointer);
  $pointer: nth($find-integer, 1);
  $result:  nth($find-integer, 2);

  // If there still is a dot, it means we have to check for the digits part of
  // the value.
  @if (str-slice($value, $pointer, $pointer) == '.') {
    $find-digits: _sc-find-digits($value, $pointer);
    $pointer: nth($find-digits, 1);
    $digits:  nth($find-digits, 2);
    $result: ($result + $digits);
  }

  // If the first character is a minus symbol, it means the number is negative
  // so we can multiply it per -1.
  @if ($first-character == '-') {
    $result: ($result * -1);
  }

  // If we are still not done with the evaluation, it means there could be a CSS
  // unit, so we check for it.
  @if ($pointer <= str-length($value)) {
    $result: _sc-unit($result, str-slice($value, $pointer));
  }

  @return $result;
}

/// Convert to string
/// @param {*} $value - value to cast
/// @return {String}
@function to-string($value) {
  $type: type-of($value);

  // If the value is already a string, we can safely return it.
  @if ($type == 'string') {
    @return $value;
  }

  @if type-of($value) == 'color' {
    @warn 'Beware! Sass does some color conversion. The resulting string may be different from the color input.';
  }

  @return inspect($value);
}

/// Cast a string into a hexadecimal color
/// @access private
/// @param {string} $string - string
/// @return {Color | String} - string or hex color depending on the match
/// @require {function} _hex-to-dec
@function _sc-from-hex($string) {
  $string: to-lower-case($string);
  $r: ''; 
  $g: '';
  $b: '';
  $hex: map-get($sc-constants, 'HEXADECIMAL_SPACE');
  $length: str-length($string);
  $max: if($length == 4, 1, 2);

  // If the length of the value is neither 4, nor 7, it cannot be a valid
  // hexadecimal triplet, therefore we warn and return the default color value
  // (or throw in strict mode).
  @if ($length != 4 and $length != 7) {
    @return _sc-throw($string, 'color');
  }

  // Loop through the characters from the value, starting from the second one
  // to omit the initial hash.
  @for $i from 2 through $length {
    $c: str-slice($string, $i, $i);

    // If the character is not part of the hexadecimal space, the color cannot
    // be a valid hexadecimal triplet, therefore we warn and return the default
    // color value (or throw in strict mode).
    @if not index($hex, $c) {
      @return _sc-throw($string, 'color');
    }

    @if (str-length($r) < $max) {
      $r: ($r + $c);
    } @else if (str-length($g) < $max) {
      $g: ($g + $c);
    } @else if (str-length($b) < $max) {
      $b: ($b + $c);
    }
  }

  // If the triplet is a short one, duplicated each found valud to compose a
  // long version, necessary for the _sc-hex-to-dec(..) calls.
  @if $length == 4 {
    $r: $r + $r;
    $g: $g + $g;
    $b: $b + $b;
  }

  @return rgb(_sc-hex-to-dec($r), _sc-hex-to-dec($g), _sc-hex-to-dec($b));
}

/// Cast a string representation of a hsl(..) call into a color
/// @access private
/// @param {string} $string - string
/// @return {Color} - Color
@function _sc-from-hsl($value) {
  $value: to-lower-case($value);
  $channels: ('h': '', 's': '', 'l': '', 'a': '');
  $channel-keys: map-keys($channels);
  $current-channel: nth($channel-keys, 1);
  $discarded-characters: join($channel-keys, (' ', '(', ')'));

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);
  
    // If the character is neither the part of the function name, nor a space or
    // a parenthese, we proceed further.
    @if not index($discarded-characters, $character) {
      // If the current character is a comma, it means we change the current
      // channel to the next one.
      @if ($character == ',') {
        $current-channel-index: index($channel-keys, $current-channel);
        $current-channel: nth($channel-keys, $current-channel-index + 1);
      }
  
      // If the current character is not a comma, it means it is part of the
      // value for the current channel and therefore should be saved.
      @else {
        $current-channel-value: map-get($channels, $current-channel);
        $channels: map-merge($channels, ($current-channel: $current-channel-value + $character));
      }
    }
  }
  
  $hue: to-number(map-get($channels, 'h'));
  $saturation: to-number(map-get($channels, 's'));
  $lightness: to-number(map-get($channels, 'l'));
  $alpha: map-get($channels, 'a');

  // If there is no alpha channel registered, return a classic hsl(..) call.  
  @if ($alpha == '') {
    @return hsl($hue, $saturation, $lightness);
  }
  
  // If there is a registered alpha channel, return a hsla(..) call.  
  @return hsla($hue, $saturation, $lightness, to-number($alpha));
}

/// Cast a string representation of a rgb(..) call into a color
/// @access private
/// @param {String} $string - string
/// @return {Color} - Color
@function _sc-from-rgb($value) {
  $value: to-lower-case($value);
  $channels: ('r': '', 'g': '', 'b': '', 'a': '');
  $channel-keys: map-keys($channels);
  $current-channel: nth($channel-keys, 1);
  $discarded-characters: join($channel-keys, (' ', '(', ')'));

  @for $i from 1 through str-length($value) {
    $character: str-slice($value, $i, $i);

    // If the character is neither the part of the function name, nor a space or
    // a parenthese, we proceed further.
    @if not index($discarded-characters, $character) {
      // If the current character is a comma, it means we change the current
      // channel to the next one.
      @if ($character == ',') {
        $current-channel-index: index($channel-keys, $current-channel);
        $current-channel: nth($channel-keys, $current-channel-index + 1);
      }
  
      // If the current character is not a comma, it means it is part of the
      // value for the current channel and therefore should be saved.
      @else {
        $current-channel-value: map-get($channels, $current-channel);
        $channels: map-merge($channels, ($current-channel: $current-channel-value + $character));
      }
    }
  }
  
  $red: to-number(map-get($channels, 'r'));
  $green: to-number(map-get($channels, 'g'));
  $blue: to-number(map-get($channels, 'b'));
  $alpha: map-get($channels, 'a');
  
  // If there is no alpha channel registered, return a classic hsl(..) call.  
  @if ($alpha == '') {
    @return rgb($red, $green, $blue);
  }

  // If there is a registered alpha channel, return a rgba(..) call.    
  @return rgba($red, $green, $blue, to-number($alpha));
}

/// Convert an hexadecimal number to a decimal number
/// @access private
/// @param {String} $string - hexadecimal value
/// @return {Number} - decimal number
@function _sc-hex-to-dec($string) {
  $string: to-lower-case($string);
  $length: str-length($string);
  $hex: map-get($sc-constants, 'HEXADECIMAL_SPACE');

  $decimal: 0;

  @for $i from 1 through $length {
    $factor: 1 + (length($hex) * ($length - $i));
    $index: index($hex, str-slice($string, $i, $i));
    $decimal: $decimal + $factor * ($index - 1);
  }

  @return $decimal;
}

/// Finding the digits part of a stringified number
/// @access private
/// @param {string} $source - string source
/// @param {Number} $pointer - current pointer
/// @return {List} - new pointer, parsed number
@function _sc-find-digits($source, $pointer) {
  $source: to-lower-case($source);
  $length: str-length($source);
  $numbers: map-get($sc-constants, 'DECIMAL_SPACE');
  $result: 0;
  $runs: 1;

  @while ($pointer <= $length) {
    $token: str-slice($source, $pointer, $pointer);
    $index: index($numbers, $token);

    @if ($token == '.') {
      // @continue;
    } @else if ($index and $index > 0) {
      $runs: ($runs * 10);
      $result: ($result * 10) + ($index - 1);
    } @else {
      @return $pointer, ($result / $runs);
    }

    $pointer: ($pointer + 1);
  }

  @return $pointer, ($result / $runs);
}

/// Finding the integer part of a stringified number
/// @access private
/// @param {String} $source  - string source
/// @param {Number} $pointer - current pointer
/// @return {List} new pointer, parsed number
@function _sc-find-integer($source, $pointer) {
  $source: to-lower-case($source);
  $length: str-length($source);
  $numbers: map-get($sc-constants, 'DECIMAL_SPACE');
  $result: 0;

  @while ($pointer <= $length) {
    $token: str-slice($source, $pointer, $pointer);
    $index: index($numbers, $token);

    @if ($token == '-') {
      // @continue;
    } @else if $index {
      $result: ($result * 10) + ($index - 1);
    } @else {
      @return $pointer, $result;
    }

    $pointer: ($pointer + 1);
  }

  @return $pointer, $result;
}

/// Power function
/// @access private
/// @param {Number} $x - number
/// @param {Number} $n - power
/// @return {Number} $x ^ $n
@function _sc-pow($x, $n) {
  $ret: 1;

  @if $n >= 0 {
    @for $i from 1 through $n {
      $ret: ($ret * $x);
    }
  } @else {
    @for $i from $n to 0 {
      $ret: ($ret / $x);
    }
  }

  @return $ret;
}

/// Tries to find a unit that would match a CSS length
/// @access private
/// @param {Number} $number - number
/// @param {String}   $unit - potential unit
/// @return {Number} length (0 if cast failed)
@function _sc-unit($number, $unit) {
  $units: map-get($sc-constants, 'UNIT_VALUES');
  $index: index(map-get($sc-constants, 'UNITS'), $unit);

  @if not $index {
    @return _sc-throw($number, 'number');
  }

  @return ($number * nth($units, $index));
}
