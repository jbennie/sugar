/**
 * Return the generated vertical rhythme properties map calculated depending on the passed arguments
 *
 * @param 			{Number} 				[$font-size=settings.typography.font-size] 			The font size wanted
 * @param 			{String} 				[$font-family=settings.typography.font-family] 		The font family to use
 * @param 			{Number} 				[$line-height=null] 							The line height to use
 * @param 			{Number} 				[$margin-top=0] 								The targeted margin-top
 * @param 			{Number} 				[$margin-bottom=0] 								The targeted margin-bottom
 * @param 			{Number} 				[$padding-top=0] 								The targeted padding-top
 * @param 			{Number} 				[$padding-bottom=0] 							The targeted padding-bottom
 * @param 			{List} 					[$margin=null] 									The targeted margin property
 * @param 			{List} 					[$padding=null] 								The targeted padding property
 * @param 			{List} 					[$border-top=null] 								The targeted border-top property
 * @param 			{List} 					[$border-bottom=null] 							The targeted border-bottom property
 * @param 			{Number} 				[$border-top-width=0] 							The targeted border-top-width property
 * @param 			{Number} 				[$border-bottom-width=0] 						The targeted border-bottom-width property
 * @param 			{Number} 				[$border=null] 									The targeted border property
 * @param 			{Number} 				[$cap-height=null] 								The font cap-height used to calculate the vertical ryhthme
 * @param 			{Boolean|String} 		[$calculate-height=false] 						If true|min-height|max-height|height, will return the corresponding absolute height value in the map
 *
 * @TODO example
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
@function s-vertical-rhythm(
	$font-size : s-setting('typography.font-size'),
	$font-family : s-setting('typography.font-family'),
	$line-height : null,
	$margin-top : 0,
	$margin-bottom : 0,
	$padding-top : 0,
	$padding-bottom : 0,
	$margin : null,
	$padding : null,
	$border-bottom : null,
	$border-top : null,
	$border-bottom-width : 0,
	$border-top-width : 0,
	$border : null,
	$cap-height : null,
	$calculate-height : false
) {
	@if $_sugar-test-arguments {
		$font-size : s-test-argument('s-vertical-rhythm','font-size',number,$font-size);
		$font-family : s-test-argument('s-vertical-rhythm','font-family',map-keys(s-setting('fonts')),$font-family);
		$line-height : s-test-argument('s-vertical-rhythm','line-height',number,$line-height);
		$margin-top : s-test-argument('s-vertical-rhythm','margin-top',number,$margin-top);
		$margin-bottom : s-test-argument('s-vertical-rhythm','margin-bottom',number,$margin-bottom);
		$padding-top : s-test-argument('s-vertical-rhythm','padding-top',number,$padding-top);
		$padding-bottom : s-test-argument('s-vertical-rhythm','padding-bottom',number,$padding-bottom);
		$margin : s-test-argument('s-vertical-rhythm','margin','number|list',$margin);
		$padding : s-test-argument('s-vertical-rhythm','padding','number|list',$padding);
		$border-bottom : s-test-argument('s-vertical-rhythm','border-bottom','number|list',$border-bottom);
		$border-top : s-test-argument('s-vertical-rhythm','border-top','number|list',$border-top);
		$border-bottom-width : s-test-argument('s-vertical-rhythm','border-bottom-width',number,$border-bottom-width);
		$border-top-width : s-test-argument('s-vertical-rhythm','border-top-width',number,$border-top-width);
		$border : s-test-argument('s-vertical-rhythm','border','number|list',$border);
		$cap-height : s-test-argument('s-vertical-rhythm','cap-height',number,$cap-height);
		$calculate-height : s-test-argument('s-vertical-rhythm','calculate-height',(true,false,min-height,max-height,height),$calculate-height);
	}

	$root-font-size : s-setting('typography.font-size');

	// get the font object
	$fonts : s-setting('fonts');
	@if not $cap-height {
		$f : s-setting('fonts.default');
		@if type-of($f) == string {
			$f : map-get($fonts, $f);
		}
		$cap-height : map-get-or($f, cap-height, 0);
	}

	// if a font family is passed
	@if $font-family {
		@if map-get($fonts, $font-family) {
			$f : map-get($fonts, $font-family);
			@if type-of($f) == string {
				$f : map-get($fonts, $f);
			}
			$cap-height : map-get-or($f, cap-height, $cap-height);
			$font-family : map-get-or($f, font-family, $font-family);
		}
	}

	// check some values
	@if $border-bottom-width {
		$border-bottom : $border-bottom-width;
	} @else if $border-bottom and type-of($border-bottom) != number {
		$map : s-border-map($border-bottom);
		$border-bottom : map-get-or($map, width, $border-bottom);
	} @else if $border and type-of($border) != number {
		$map : s-border-map($border);
		$border-bottom : map-get-or($map, width, $border);
	} @else if $border and type-of($border) == number {
		$border-bottom : $border;
	}
	@if $border-top-width {
		$border-top : $border-top-width;
	} @else if $border-top and type-of($border-top) != number {
		$map : s-border-map($border-top);
		$border-top : map-get-or($map, width, $border-top);
	} @else if $border and type-of($border) != number {
		$map : s-border-map($border);
		$border-top : map-get-or($map, width, $border);
	} @else if $border and type-of($border) == number {
		$border-top : $border;
	}
	@if $margin {
		$map : s-margin-map($margin);
		$margin-top : map-get-or($map, top, $margin-top);
		$margin-bottom : map-get-or($map, bottom, $margin-bottom);
	}
	@if $padding {
		$map : s-margin-map($padding);
		$padding-top : map-get-or($map, top, $padding-top);
		$padding-bottom : map-get-or($map, bottom, $padding-bottom);
	}

	// protect
	@if not $font-size {
		@error("The function s-vertical-rhythm need a font-size...");
	}

	// calculate number of line height needed
	@if not $line-height and $font-size {
		$line-height : s-strip-units(ceil(s-rem(s-px($font-size))));
	}

	// process values
	$margin-top : round(s-rem($margin-top));
	$margin-bottom : round(s-rem($margin-bottom));
	$padding-top : s-rem($padding-top);
	$padding-bottom : s-rem($padding-bottom);
	$border-bottom : s-rem($border-bottom);
	$border-top : s-rem($border-top);
	$line-height : ceil(s-rem($line-height));

	// save targeted margin bottom
	$targeted-margin-bottom : $margin-bottom;
	$targeted-margin-top : $margin-top;

	// transform in rem if are pixels passed
	@if unit($font-size) != px {
		$font-size : s-px($font-size);
	}

	// manage cap height
	@if $cap-height == null {
		$cap-height : 0;
	}
	// manage font-size
	@if s-strip-units($font-size) <= 0 {
		$font-size : ceil($font-size + 0.1);
	}

	// protect
	@if type-of($font-size) == number {
		$rootsize: $root-font-size;
		$baseline-shift: ($font-size / 2 * (($line-height * $rootsize / $font-size) - $cap-height)) / $rootsize + 0.00001;
		$baseline-push: $margin-bottom - (($font-size / 2 * (($line-height * $rootsize / $font-size) - $cap-height)) / $rootsize + 0.00001);

		$baseline-push : $baseline-push % 1;
		$baseline-shift : $baseline-shift % 1;
		$decimal : $baseline-push % 1;

		// if we have a padding top, respect it
		// we add the shift to the margin bottom
		// to respect the vertical rhythme
		$respect-padding-top : false;
		@if $padding-top > 0rem {
			$margin-bottom : $margin-bottom + $baseline-shift;
			$respect-padding-top : true;
		} @else {
			$padding-top : $padding-top + $baseline-shift;
		}
		$margin-bottom : $margin-bottom + $baseline-push;



		$dec : $margin-bottom % 1;
		$diff : $margin-bottom - $targeted-margin-bottom;
		@if $diff > 1rem {
			$margin-bottom : $margin-bottom - 1;
		}
		@if $margin-bottom > $targeted-margin-bottom {
			@if $dec > 0.5rem {
				$margin-bottom : $margin-bottom - 1;
			}
		} @else if $margin-bottom < $targeted-margin-bottom {
			@if $dec < 0.5rem {
				$margin-bottom : $margin-bottom + 1;
			}
		}



		// handle borders
		@if $border-top > 0rem {
		 	$dec : $border-top % 1;

			// check where to cut the border
			// to have the best result
			@if $margin-top > $padding-top {
				@if $margin-top - $border-top >= 0rem {
					$margin-top : $margin-top - $border-top;
				} @else {
					$margin-top : $margin-top + (1 - $dec);
				}
			} @else {
				@if $padding-top - ($border-top / 2) >= 0rem and $padding-bottom - ($border-top / 2) >= 0rem {
					$padding-top : $padding-top - $border-top / 2;
					$padding-bottom : $padding-bottom - $border-top / 2;
				} @else if $padding-top - $border-top >= 0rem {
					$padding-top : $padding-top - $border-top;
				} @else {
					$padding-top : $padding-top + (1 - $dec);
				}
			}
		}
		@if $border-bottom > 0rem {
		 	$dec : $border-bottom % 1;

			// check where to cut the border
			// to have the best result
			@if $margin-bottom > $padding-bottom {
				@if $margin-bottom - $border-bottom >= 0rem {
					$margin-bottom : $margin-bottom - $border-bottom;
				} @else {
					$margin-bottom : $margin-bottom + (1 - $dec);
				}
			} @else {
				@if $padding-top - ($border-bottom / 2) >= 0rem and $padding-bottom - ($border-bottom / 2) >= 0rem {
					$padding-top : $padding-top - $border-bottom / 2;
					$padding-bottom : $padding-bottom - $border-bottom / 2;
				} @else if $padding-bottom - $border-bottom >= 0rem {
					$padding-bottom : $padding-bottom - $border-bottom;
				} @else {
					$padding-bottom : $padding-bottom + (1 - $dec);
				}
			}
		}

		$ret : (
			font-size : s-rem($font-size),
			line-height : s-rem($line-height)
		);

		@if $calculate-height != false {
			$height : $padding-top + $padding-bottom + $line-height;
			@if $calculate-height == true {
				$calculate-height : height;
			}
			$ret : map-set($ret, $calculate-height, $height);
			$ret : map-set($ret, line-height, $height);
			$dec : $height % 1;
			$padding-top : 0;
			$padding-bottom : 0;
			$margin-bottom : $margin-bottom - $dec;
		}

		$ret : map-set($ret, padding-top, $padding-top);
		$ret : map-set($ret, padding-bottom, $padding-bottom);
		$ret : map-set($ret, margin-bottom, $margin-bottom);
		@if $margin-top > 0rem {
			$ret : map-merge($ret, (
				position : relative,
				top : $margin-top,
				margin-bottom : $margin-bottom + $margin-top
			));
		}

		@return $ret;
		// }
	} @else {
		@warn "#{$font-size} is not a valid scale variable";
	}
	@return null;
}
