/**
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : s-look-and-feel(padding-horizontal) s-look-and-feel(padding-vertical);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
@function s-look-and-feel(
	$name
) {
	// protect
	@if not s-is($name, string) {
		@error("the s-look-and-feel name parameter has to be a string corresponding to a look and feel setting...");
	}

	// initial value
	$value : s-setting('look-and-feel.#{$name}');

	@if type-of($value) != number {
		@error('Your look-and-feel value "#{$name}" setted to "#{$value}" need to be a number in "em" or unitless');
	}

	// make sure value is in em unit
	@if type-of($value) == number and not unitless($value) and unit($value) != em {
		@error('Your look-and-feel value "#{$name}" setted to "#{$value}" need to be in "em"');
	}

	// return the value
	@return $value;

	// // if the value is a unitless one
	// // return the interpolated value only
	// @if $value and unitless($value) {
	// 	@return s-interpolate('settings.look-and-feel.#{$name}', $size);
	// } @else if $value {
	// 	// if we have a number value, return the interpolated version
	// 	@return s-render-round(s-interpolate('settings.look-and-feel.#{$name}', $size));
	// }
	//
	// // we don't have anything...
	// @return null;
}
