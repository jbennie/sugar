/**
 * Print out the vertical rhythme properties map calculated depending on the passed arguments
 *
 * @param 			{Number} 				[$font-size=settings.typo.font-size] 			The font size wanted
 * @param 			{String} 				[$font-family=settings.typo.font-family] 		The font family to use
 * @param 			{Number} 				[$line-height=null] 							The line height to use
 * @param 			{Number} 				[$margin-top=0] 								The targeted margin-top
 * @param 			{Number} 				[$margin-bottom=0] 								The targeted margin-bottom
 * @param 			{Number} 				[$padding-top=0] 								The targeted padding-top
 * @param 			{Number} 				[$padding-bottom=0] 							The targeted padding-bottom
 * @param 			{List} 					[$margin=null] 									The targeted margin property
 * @param 			{List} 					[$padding=null] 								The targeted padding property
 * @param 			{List} 					[$border-top=null] 								The targeted border-top property
 * @param 			{List} 					[$border-bottom=null] 							The targeted border-bottom property
 * @param 			{Number} 				[$border-top-width=0] 							The targeted border-top-width property
 * @param 			{Number} 				[$border-bottom-width=0] 						The targeted border-bottom-width property
 * @param 			{Number} 				[$border=null] 									The targeted border property
 * @param 			{Number} 				[$cap-height=null] 								The font cap-height used to calculate the vertical ryhthme
 * @param 			{Boolean}{String}Â 		[$calculate-height=false] 						If true|min-height|max-height|height, will return the corresponding absolute height value in the map
 *
 * @TODO example
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
@function _s-classify($item, $args...) {
	@return unquote(".#{$item}");
}
@function _list-to-comma-list($list) {
	$new-list : ();
	@each $item in $list {
		$new-list : append($new-list, $item, comma);
	}
	@return $new-list;
}
@function _s-exclude-vertical-rhythme-scope-selectors($item, $args...) {
	$scope-class : s-setting('vertical-rhythme.scope-class');
	@if not $item or $item == '' {
		@return false;
	}
	@return index($scope-class, _replace($item,'.','')) == null;
}
@mixin s-vertical-rhythme(
	$font-size : null,
	$font-family : s-setting('typo.font-family'),
	$line-height : null,
	$margin-top : 0,
	$margin-bottom : 0,
	$padding-top : 0,
	$padding-bottom : 0,
	$margin : null,
	$padding : null,
	$border-bottom : null,
	$border-top : null,
	$border-bottom-width : 0,
	$border-top-width : 0,
	$border : null,
	$cap-height : null,
	$scope-class : true,
	$calculate-height : false
) {

	@if s-setting('vertical-rhythme.enabled') {

		$sc : s-setting('vertical-rhythme.scope-class');
		@if type-of($scope-class) == string or type-of($scope-class) == list {
			$sc : $scope-class;
		}

		// check if we have some arguments
		// mean that we want the vertical rhythme css properties
		// otherwise we just need to wrap content in vertical-align scope
		@if $font-size {

			// get the rhythme
			$rhythme-map : s-vertical-rhythme(
				$font-size : $font-size,
				$line-height : $line-height,
				$margin : $margin,
				$margin-top : $margin-top,
				$margin-bottom : $margin-bottom,
				$padding : $padding,
				$padding-top : $padding-top,
				$padding-bottom : $padding-bottom,
				$border-top-width : $border-top-width,
				$border-top : $border-top,
				$border-bottom-width : $border-bottom-width,
				$border-bottom : $border-bottom,
				$cap-height : $cap-height,
				$calculate-height : $calculate-height
			);
			// remove margin-top cause it's done by top and margin-bottom compensation
			@if map-get($rhythme-map, top) {
				$rhythme-map : map-remove($rhythme-map, margin-top);
			}

			// set values
			$rhythme-map : map-remove($rhythme-map, cap-height);
			$rhythme-map : map-remove($rhythme-map, scope-class);
			$rhythme-map : map-remove($rhythme-map, calculate-height);
			@if $scope-class {
				@each $cls in $sc {
					&.#{$cls},
					.#{$cls} > & {
						@each $prop, $value in $rhythme-map {
							#{$prop} : $value;
						}
						@content;
					}
				}
			} @else {
				& {
					@each $prop, $value in $rhythme-map {
						#{$prop} : $value;
					}
					@content;
				}
			}
		} @else {
			@if $scope-class {
				@each $cls in $sc {
					&.#{$cls},
					.#{$cls} > & {
						@content;
					}
				}
			} @else {
				& {
					@content;
				}
			}
		}
	}
}
