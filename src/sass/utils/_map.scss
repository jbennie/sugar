//
// Map set
//
// @param 	Map 	$map 		The map to use
// @param 	String 	$key 		The key to update
// @param 	Mixed 	$value 		The new value
// @return 	Map 			The new map
//
@function map-set($map, $key, $value) {
	$new: ($key: $value);
	@return map-merge($map, $new);
}

//
// Get deep values in map
//
@function map-deep-values(
	$map
) {
	$values : ();
	// loop on each keys
	@each $key, $value in $map {
		@if type-of($value) == map or type-of($value) == list {
			// add to values :
			$values : join($values, map-deep-values($value));
		} @else {
			// add to values :
			$values : append($values, $value);
		}
	}
	// return values
	@return $values;
}

@function map-get-path(
	$map,
	$path,
	$default : null
) {
	$parts : _split($path,'.');
	$value : $map;
	@each $part in $parts {
		$newValue : map-get($value, $part);
		@if not $newValue {
			@return $default;
		}
		$value : $newValue;
	}
	@return $value;
}

//
// Map get or
// This will try to get the elements in map by index order
//
@function map-get-or(
	$map,
	$index-list,
	$default : null
) {
	@each $index in $index-list {
		$res : map-get($map, $index);
		@if $res != null {
			@return $res;
		}
	}
	// we do not find anything
	@return $default;
}


// jQuery-style extend function
// About `map-merge()`:
// * only takes 2 arguments
// * is not recursive
// @param {Map} $map - first map
// @param {ArgList} $maps - other maps
// @param {Bool} $deep - recursive mode
// @return {Map}
@function map-extend($map, $maps.../*, $deep */) {
	$last: nth($maps, -1);
	$deep: $last == true;
	$max: if($deep, length($maps) - 1, length($maps));

	// Loop through all maps in $maps...
	@for $i from 1 through $max {
		// Store current map
		$current: nth($maps, $i);

		// If not in deep mode, simply merge current map with map
		@if not $deep {
			$map: map-merge($map, $current);
		} @else {
			// If in deep mode, loop through all tuples in current map
			@each $key, $value in $current {

				// If value is a nested map and same key from map is a nested map as well
				// @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
				// 	// Recursive extend
				// 	$value: map-extend(map-get($map, $key), $value, true);
				// }
				@if (type-of($value) == "map" and type-of(map-get($map, $key)) == "map") {
					// Recursive extend
					$value: map-extend(map-get($map, $key), $value, true);
				} @else if type-of($value) == 'list' and length($value) <= 0 {
					$value : map-get($map, $key);
				}

				// Merge current tuple with map
				$map: map-merge($map, ($key: $value));
			}
		}
	}

	@return $map;
}
