
//
// Universal media mixin
//
$media-keywords : (
	gecko : '.ua-gecko',
	webkit : '.ua-webkit',
	trident : 'ua-trident',
	blink : 'ua-blink',
	presto : 'ua-presto',

	chrome : '.ua-chrome',
	safari : '.ua-safari',
	firefox : '.ua-firefox',
	opera : '.ua-opera',
	ie : '.ua-ie',

	mobile : '.ua-mobile',
	tablet : '.ua-tablet',
	desktop : '.ua-desktop',
	iphone : '.ua-mobile-iphone',
	ipad : '.ua-mobile-ipad',

	ios : '.ua-ios',
	osx : '.ua-mac_os_x',
	windows : '.ua-windows',
	linux : '.ua-linux',
	android : '.ua-android',
	webos : '.ua-webos',
	blackberry : '.ua-blackberry',

	// 2x : '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 320dpi)',
	// 3x : '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 480dpi)',
	// 4x : '(-webkit-min-device-pixel-ratio: 4), (min-resolution: 640dpi)',
	// 5x : '(-webkit-min-device-pixel-ratio: 5), (min-resolution: 800dpi)',
	// 6x : '(-webkit-min-device-pixel-ratio: 6), (min-resolution: 960dpi)'
);
@for $idx from 6 through 20 {
	$media-keywords : map-set($media-keywords, 'ie#{$idx}', '.ua-ie-#{$idx}');
}

/**
 * Easy to use media query mixin that support cssua classes to target specific browsers
 * @param 		{String} 		[$screen=null] 			Any of the @media screen type property like "screen, handheld, print, etc..."
 * @param 		{Number} 		[$min-width=null] 		The min width to target
 * @param 		{Number} 		[$max-width=null] 		The max width to target
 * @param 		{Number} 		[$min-height=null] 		The min height to target
 * @param 		{Number} 		[$max-height=null] 		The max height to target
 * @param 		{String} 		[$orientation=null] 	The orientation to target. Can be portrait or landscape
 * @param 		{String} 		[$resolution=null] 		The resolution to target. Can be 2x, 3x, 4x, etc...
 * @param 		{String} 		[$engine=null] 			The engine that powers the display. Can be gecko, webkit, trident, blink or presto
 * @param 		{String} 		[$device=null] 			The device to target. Can be mobile, tablet, desktop, iphone or ipad
 * @param 		{String} 		[$browser=null] 		The browser(s) to target. Can be chrome, safari, firefox, opera, ie, ie6-20
 * @param 		{String} 		[$system=null] 			The system(s) to target. Can be ios, osx, windows, linux, android, webos or blackberry
 *
 * @example 	scss
 * // simple min width
 * \@include s-media(
 * 	$min-width : 200px
 * ) {
 * 	// custom css here...
 * }
 *
 * // target a specific engine
 * \@include s-media(
 * 	$engine : gecko webkit
 * ) {
 * 	// custom css here
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin s-media(
	$screen : null,
	$min-width : null,
	$max-width : null,
	$min-height : null,
	$max-height : null,
	$orientation : null,
	$resolution : null,
	$engine : null,
	$device : null,
	$browser : null,
	$system : null
) {
	@if $_sugar-test-arguments {
		$screen : s-test-argument('s-media','screen',(screen,handheld,print,aural,braille,embossed,projection,tty,tv,all),$screen);
		$min-width : s-test-argument('s-media','min-width',number,$min-width);
		$max-width : s-test-argument('s-media','max-width',number,$max-width);
		$min-height : s-test-argument('s-media','min-height',number,$min-height);
		$max-height : s-test-argument('s-media','max-height',number,$max-height);
		$orientation : s-test-argument('s-media','orientation',(landscape,portrait),$orientation);
		$resolution : s-test-argument('s-media','resolution','string|list-string',$resolution);
		$engine : s-test-argument('s-media','engine','string|list-string',$engine);
		$device : s-test-argument('s-media','device','string|list-string',$device);
		$browser : s-test-argument('s-media','browser','string|list-string',$browser);
		$system : s-test-argument('s-media','system','string|list-string',$system);
	}

	$media : ('all');
	@if $screen {
		$media : append($media, $screen);
	}
	@if $orientation {
		$media : append($media, '(orientation : #{$orientation})');
	}
	@if $min-width {
		$media : append($media, '(min-width : #{$min-width})');
	}
	@if $max-width {
		$media : append($media, '(max-width : #{$max-width})');
	}
	@if $min-height {
		$media : append($media, '(min-height : #{$min-height})');
	}
	@if $max-height {
		$media : append($media, '(max-height : #{$max-height})');
	}

	// resolution
	@if $resolution {
		$res : ();
		@each $r in $resolution {
			$r : _replace($r, 'x');
			$r : to-number($r);
			// check that the $r is now a proper integer
			@if s-is($r, integer) {
				$res : append($res, '(-webkit-min-device-pixel-ratio: #{$r}), (min-resolution: #{160 * $r}dpi)');
			}
		}
		// $resolutions : (2x,3x,4x);
		// @each $m in $resolution {
		// 	@if index($resolutions,$m) {
		// 		$res : append($res, map-get($media-keywords,$m));
		// 	}
		// }
		$media : append($media, _join($res,','));
	}

	// construct media querie
	$med : _join($media,' and ');
	$this : "#{&}";

	// construct refine
	$refine : ();
	@if $engine {
		$engines : (blink,gecko,trident,webkit,presto);
		@each $e in $engine {
			@if index($engines,$e) {
				$refine : append($refine, map-get($media-keywords,$e), comma);
			}
		}
	}
	@if $browser {
		$browsers : (chrome,safari,opera,firefox,ie);
		@for $idx from 6 through 20 {
			$browsers : append($browsers, 'ie#{$idx}');
		}
		@each $b in $browser {
			@if index($browsers,$b) {
				$refine : append($refine, map-get($media-keywords,$b), comma);
			}
		}
	}
	@if $device {
		$devices : (mobile,tablet,desktop,iphone,ipad);
		@each $d in $device {
			@if index($devices,$d) {
				$refine : append($refine, map-get($media-keywords,$d), comma);
			}
		}
	}
	@if $system {
		$systems : (ios,android,blackberry,windows,osx,linux,webos);
		@each $s in $system {
			@if index($systems,$s) {
				$refine : append($refine, map-get($media-keywords,$s), comma);
			}
		}
	}

	@if length($refine) <= 0 {
		@media #{$med} {
			@if $this != '' {
				& {
					@content;
				}
			} @else {
				@content;
			}
		}
	} @else {
		@each $ref in $refine {
			@media #{$med} {
				@if $this != '' {
					#{$ref} & {
						@content;
					}
				} @else {
					#{$ref} {
						@content;
					}
				}
			}
		}
	}
}
