$_s-formset-radiobox-component-inited : false;
@mixin s-radiobox-component-init() {
	@if not $_s-formset-radiobox-component-inited {
		$_s-formset-radiobox-component-inited : true !global;
	}
}

@mixin s-radiobox-component(
	$colors : default primary secondary,
	$animations : true
) {
	@include s-radiobox-component-bare();
	@if $colors {
		@include s-radiobox-component-style(
			$animations : $animations,
			$colors : $colors
		);
	}
}

@mixin s-radiobox-component-bare(
) {

	// init form
	@include s-radiobox-component-init();
	@include s-component('s-radiobox') {

		// parse properties
		@if $_sugar-test-arguments {
			// $colors : s-test-argument('s-formset-radiobox-style','colors',map-keys(s-setting('colors')),$colors);
		}

		// base
		%#{s-component()}-checkbox-bare,
		input[is="#{s-component()}"][type="checkbox"] {
			// position: absolute;
			// left : -999999px;

			& + #{s-component-selector($method : BEM)} {
				display: inline-block;
				position: relative;
				cursor: pointer;
				vertical-align: middle;

				&:before {
					content:'';
					display: block;
					position:absolute;
					top:50%; left:50%;
					@include s-translate(-50%,-50%);
					height:100%; width:100%;
					pointer-events:none;
				}
				&:after {
					content:'';
					display: block;
					position: absolute;
					top:50%; left:50%;
					width: 30%; height: 30%;
					@include s-translate(-50%, -50%);
					z-index:1;
				}
			}
		}
		input[is="#{s-component()}"][type="radio"] {
			@extend %#{s-component()}-checkbox-bare;
			border-radius: 50% !important;

			& + #{s-component-selector($method : BEM)} {
				&,
				&:after,
				&:before {
					border-radius:50% !important;
				}
			}
		}

		input[is="#{s-component()}"] {
			$br : s-lnf(border-radius);
			$fs : 1em * 1.3;
			& + #{s-component-selector($method : BEM)} {
				width: $fs;
				height: $fs;
				&:after {
					border-radius: $br / 100 * 30;
				}
				&:before {
					border-radius: $br;
				}
			}

			&:checked {
				& + #{s-component-selector($method : BEM)} {
					&:after {
						border-radius: $br / 100 * 60
					}
				}
			}
		}

		#{s-component-selector($method : BEM)} + span {
			margin-left: .5em;
		}
	}
}

@mixin s-radiobox-component-style(
	$colors : default primary secondary,
	$animations : true
) {

	// init form
	@include s-radiobox-component-init();
	@include s-component('s-radiobox') {
		// parse properties
		@if $_sugar-test-arguments {
			// $colors : s-test-argument('s-formset-radiobox-style','colors',map-keys(s-setting('colors')),$colors);
		}

	    // colors
	    @if ($colors) {
			@each $color in $colors {

				input[color="#{$color}"] {
					& + #{s-component-selector($method : BEM)} {
						&:before {
							background-color: white;
							border:1px solid s-color($color, -opacity .1);
						}
					}

					& + #{s-component-selector($method : BEM)}:after {
						background-color : s-color($color, -opacity .1);
						background-color: white;
					}


					& + #{s-component-selector($method : BEM)}:hover {
						&:after {
							background-color: s-color($color, -opacity .15);
							// @include s-depth(3, s-color($color, -opacity .3));
						}
						&:after,
						&:before {
							width:60% !important;
							height:60% !important;
						}
					}
					&:checked {
						& + #{s-component-selector($method : BEM)} {
							&:after {
								background-color: s-color($color);
								// @include s-depth(3, s-color($color, -opacity .3));
							}
						}
					}
				}
			}
		}

		// animations
		@if ($animations) {
			input[is="#{s-component()}"] {
				& + #{s-component-selector($method : BEM)} {
					&,
					&:before,
					&:after {
						@include s-transition(fast);
					}
				}
				&:checked + #{s-component-selector($method : BEM)}:after {
					width:40%; height:40%;
				}
			}
		}
	}
}
