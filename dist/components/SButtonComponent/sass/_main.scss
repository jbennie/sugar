/**
 * @name 	SButtonComponent
 * This file provide the mixins to create buttons
 */

%s-button-bare {
	display: inline-block;
	border-style:solid;
	border-width:1px;
	border-color:rgba(0,0,0,0);
	cursor: pointer;
	outline-width:0;
	-webkit-appearance: none;
	line-height: 0;
	text-decoration: none;
	font-size:1em;
	user-select:none;

	&:not(button):not(input) {
		line-height:1;
	}
	> * {
		vertical-align: middle;
	}
}
button {
	line-height: 1;
}

/**
 * Apply the button css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin s-button(
	$modifiers : null,
	$state : null
) {
	@include s-button-bare($modifiers, $state);
	@include s-button-style($modifiers, $state);
}

/**
 * Apply the button bare css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin s-button-bare(
	$modifiers : null,
	$state : null
) {
	@extend %s-button-bare;
	border-radius: s-lnf(border-radius);
	padding : s-lnf(padding-horizontal) s-lnf(padding-vertical);
	height: 1em + s-lnf(padding-horizontal) * 2;

	// if is a button, set the line height
	$splt : _split(#{&},' ');
	$sel : _last($splt);
	@if str-index($sel, 'button') == 1 {
		line-height:1 !important;
	}

	@if index($modifiers, 'block') {
		display: block;
		width: 100%;
	}
}

/**
 * Apply the button style css
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin s-button-style(
	$modifiers : null,
	$state : null
) {
	$color : s-color-modifier($modifiers, 'default');
	@if index($modifiers, 'outline') {
		color: s-color($color);
		background-color: transparent;
		border-color: s-color($color);

		&:active,
		&:hover,
		&.active,
		:checked + & {
			&:not(:disabled) {
				background-color: s-color($color);
				border-color: s-color($color);
				@if lightness(s-color($color)) > 70 {
					color : s-color($color, -darken 30%);
				} @else {
					color : white;
				}
			}
		}
	} @else if index($modifiers, 'link') {
		background-color: transparent !important;
		color: s-color($color) !important;
		border-color:rgba(0,0,0,0) !important;
		position:relative;

		&:after {
			content:'';
			position:absolute;
			display:block;
			bottom:s-lnf(padding-horizontal) * .4; left:50%;
			height:.2em;
			width:0;
			@include s-translate(-50%);
			@include s-transition(fast);
			background: s-color($color);
		}

		&[active],
		&.active,
		&:active,
		&:hover {
			&:not(:disabled) {
				&:after {
					width:unquote("calc(100% - #{s-lnf(padding-vertical) * 2})");
				}
			}
		}
	} @else {
		background-color: s-color($color);
		border-color: s-color($color);
		@if lightness(s-color($color)) > 70 {
			color : s-color($color, -darken 30%);
		} @else {
			color : white;
		}
		&[active],
		&.active,
		&:active,
		&:hover {
			&:not(:disabled) {
				background-color : s-color($color, -darken 15%);
				border-color: s-color($color, -darken 15%);
			}
		}
	}
	@if index($state, 'disabled') {
		opacity: s-lnf(disabled-opacity);
		cursor: not-allowed !important;
		pointer-events: none;
	}
}
