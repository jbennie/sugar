$_s-input-component-inited : false;
@mixin s-input-component-init() {
	@if not $_s-input-component-inited {
		$_s-input-component-inited : true !global;

		// input
		%s-input-component-field-bare {
			display: inline-block;
			@include s-font(s-setting('typo.font-family'));
			-webkit-appearance: none;
			-moz-appearance: none;
			&:not(.input-addon):not(textarea) {
				line-height: 1 !important;
			}
			border:none;
			outline : none;
			width:100%;
			font-size:1em;
		}
		%s-input-component-field-style {
			border-width:1px;
			border-bottom-width : 3px;
			border-style : solid;
			color: s-color(text);
			@include s-transition(fast);
			@include s-placeholder() {
				color: s-color(text, -opacity .4);
			}
			[data-input-activator]:focus ~ &,
			&:focus {
				border-left-width : 5px;
			}
			&:disabled {
				opacity : s-lnf(disabled-opacity);
				cursor: not-allowed;
			}
		}

		%s-input-component-select-field-bare {
			background-size: 9px 6px;
			background-position: right center;
			background-origin: content-box;
			background-repeat: no-repeat;
		}
	}
}


@mixin s-input-component-field(
	$color : null
) {
	@include s-input-component-init();
	@extend %s-input-component-field-bare;
	@extend %s-input-component-field-style;
	@include s-input-component-field-size();
	@if ($color) {
		@include s-input-component-field-color($color);
	}
}

@mixin s-input-component-field-bare() {
	@include s-input-component-init();
	@extend %s-input-component-field-bare;
	@include s-input-component-field-size();
}

@mixin s-input-component-field-style(
	$color : null
) {
	@include s-input-component-init();
	@extend %s-input-component-field-style;
	@if ($color) {
		@include s-input-component-field-color($color);
	}
}

@mixin s-input-component(
	$colors : default primary secondary
) {
	@include s-input-component-bare();
	@if $colors {
		@include s-input-component-style($colors);
	}
}

@mixin s-input-component-bare(
) {
	@include s-input-component-init();
	@include s-component('s-input') {

		#{s-component-selector()} {
			@extend %s-input-component-field-bare;
			// set input styling
			@include s-input-component-field-size();

			// vertical rhythme
			&, & ~Â span {
				@include s-vertical-rhythme {
					margin-bottom: 1rem;
				}
			}
		}
		textarea#{s-component-selector()} {
			height: auto !important;
			line-height:1.5;

			@include s-input-component-textarea-field-size();

			// vertical rhythme
			@include s-vertical-rhythme {
				margin-bottom:1rem;
			}
		}
	}
}
@mixin s-input-component-style(
	$colors : default primary secondary
) {
	// parse properties
	@if $_sugar-test-arguments {
		// $colors : s-test-argument('s-formset','colors',map-keys(s-setting('colors')),$colors);
	}
	@include s-component('s-input') {

		#{s-component-selector()} {
			@extend %s-input-component-field-style;
			background-color: white !important;
		}

		// generate each colors
		@each $color in $colors {

			// input styling
			#{s-component-selector(null, $color, null, 'color')} {
				@include s-input-component-field-color($color);
			}

			// select styling
			select#{s-component-selector(null, $color, null, 'color')} {
				@include s-input-component-select-field-color($color);
			}
		}
	}
}
@mixin s-input-component-field-size() {
	border-radius: s-lnf(border-radius);
	padding : 0 s-lnf(padding-vertical);
	height: 1em + s-lnf(padding-horizontal) * 2;
	&:not(input) {
		padding : s-lnf(padding-horizontal) s-lnf(padding-vertical);
	}
}
@mixin s-input-component-field-color($color) {
	border-color: s-color($color, -opacity .1);
	border-bottom-color: s-color($color, -opacity .3);

	[data-input-activator]:focus ~ &,
	[data-input-activator]:checked ~ &,
	&:hover:not(:disabled),
	&:focus:not(:disabled),
	&.active:not(:disabled) {
		border-bottom-color: s-color($color, -opacity .6);
	}
	[data-input-activator]:focus ~ &,
	[data-input-activator]:checked ~ &,
	&:focus:not(:disabled),
	&.active:not(:disabled) {
		border-left-color: s-color($color, -opacity .6);
	}
}

@mixin s-input-component-textarea-field(
	$color : null
) {
	@include s-input-component-init();
	@extend %s-input-component-field-bare;
	@include s-input-component-textarea-field-size();
	@if $color {
		@include s-input-component-field-color($color);
	}
}

@mixin s-input-component-textarea-field-bare() {
	@include s-input-component-init();
	@extend %s-input-component-field-bare;
	@include s-input-component-textarea-field-size();
}

@mixin s-input-component-textarea-field-style(
	$color : null
) {
	@include s-input-component-init();
	@extend %s-input-component-field-style;
	@if ($color) {
		@include s-input-component-field-color($color);
	}
}

@mixin s-input-component-textarea-field-size() {
	padding : s-lnf(padding-horizontal) s-lnf(padding-vertical);
	display: inline-block;
}


@mixin s-input-component-select-field-bare() {
	@include s-input-component-init();
	@extend %s-input-component-field-bare;
	background-size: 9px 6px;
	background-position: right center;
	background-origin: content-box;
	background-repeat: no-repeat;
	@include s-input-component-field-size();
}

@mixin s-input-component-select-field-style(
	$color : null
) {
	@include s-input-component-init();
	@extend %s-input-component-field-style;
	@if $color {
		@include s-input-component-field-color($color);
		@include s-input-component-select-field-color($color);
	}
}

@mixin s-input-component-select-field(
	$color : null
) {
	@include s-input-component-select-field-bare();
	@if $color {
		@include s-input-component-select-field-style($color);
	}
}
@mixin s-input-component-select-field-color($color) {
	background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="32" height="24" viewBox="0 0 32 24"><polygon points="0,0 32,0 16,24" style="fill%3A#{str-replace("#{s-color($color)}","#","%23")}"></polygon></svg>');
}
